===========================
How-to document NumPy/SciPy
===========================

.. Contents::

Overview
--------

(`epydoc <http://epydoc.sourceforge.net/>`__)
`epydoc <http://epydoc.sourceforge.net/>`

It is desireable that both NumPy and SciPy follow a convention for docstrings
that provide for some consistency while also allowing epydoc to produce
nicely-formatted reference guides. However, such a convention has not yet
been decided on. This is my current thinking on the topic.  If you have
suggestions for improvements, post them on the numpy-dev list together with
the epydoc output so they may be discussed.

The docstring format uses reST syntax as interpreted by epydoc. The markup
in this proposal is as basic as possible and in particular avoids the use of
epydoc consolidated fields. This is both because there are a limited number
of such fields, inadequate to our current needs, and because epydoc moves
the fields to the end of the documentation, messing up the ordering. So here
standard definition lists are used instead.  Likewise, epydoc moves headings
and have an unwelcome size in the default style sheet, hence they have also
been avoided.

A maximum line width of 79 is suggested, as this will allow the docstrings to
display on standard terminals. This convention is a bit old and traces back
to IBM punchcard days, but still seems to be the standard.


Sections
--------

The proposed sections of the docstring are:

1. **Short summary:**
A one-line summary not using variable names or the function name (unless a
C-function).

2. **Extended summary:**
A few sentences giving an extended description.

3. **Parameters:**

4. **Returns:**'

5. **Other parameters:**
An optional section used to describe little used
parameters so that functions with a large number of keyword argument can still
be well documented without cluttering the main parameters' list.

The Other Parameters section is for functions taking a lot of keywords
which are not always used or neeeded and whose description would clutter then
main purpose of the function. (Comment by Chuck : I think this should be
rarely used, if at all)

6. **See also:** An optional section used to refer the reader to other
related !SciPy code.  This section can be extremely useful, but needs to be
used with caution.  It can be difficult to maintain and if not used
judiciously this section can quickly loose its usefulness. For example if a
function points the reader to each and every other function in the same
package, it becomes pointless and creates a bunch of similar-looking text that
will likely get ignored by the reader.  In general, you might want to only
include references to code that has a very close relationship to the current
function (e.g., {{{trapz()}}} and {{{cumtrapz()}}}) or if the code you point
to provides additional information in its docstring that gives more insight
into what the current function is actually doing.

The See Also section can list additional related functions.  The purpose
of this section is to direct users to other functions they may not be aware
of or have easy means to discover (i.e. by looking at the docstring of the
module).  Thus, repeating functions that are in the same module is not useful
and can create a cluttered document.  Please use judgement when listing
additional functions.  Routines that provide additional information in their
docstrings for this function may be useful to include here.

7. **Notes:** An optional section that provides additional information
about the code possibly including a discussion or presentation of the
algorithm. This section may include mathematical equations possibly written in
[http://www.latex-project.org/ LaTeX].

The Notes section can contain algorithmic information if that is useful.

8. **Examples:** An optional section for examples using the
[http://www.python.org/doc/lib/module-doctest.html doctest] format.  It can
provide an inline mini-tutorial as well as additional regression testing.
While optional, this section is strongly encouraged.

The Examples section is strongly encouraged.  The examples can provide a
mini-tutorial as well as additional regression testing. (Comment by Chuck:
blank lines in the numpy output, for instance in multidimensional arrays,
will break doctest.) You can run the tests by doing::

  >>> import doctest
  >>> doctest.testfile('HOWTO_DOCUMENT.txt')


Common reST concepts
--------------------

A reST-documented module should define::

  __docformat__ = 'restructuredtext en'

at the top level in accordance with PEP 258.  Note that the __docformat__
variable in a package's __init__.py file does not apply to objects defined in
subpackages and submodules.

For paragraphs, indentation is significant and indicates indentation in the
output. New paragraphs are marked with blank line.

Use *italics*, **bold**, and ``courier`` if needed in any explanations (but
not for variable names and doctest code or multi-line code)

Use ``:lm:`eqn``` for in-line math in latex format (remember to use the
raw-format for your text string or escape any '\' symbols). Use ``:m:`eqn```
for non-latex math.

A more extensive example of reST markup can be found here:
http://docutils.sourceforge.net/docs/user/rst/demo.txt
Line spacing and indentation are significant and should
be carefully followed.

Here is a short example in plain text:
http://svn.scipy.org/svn/numpy/trunk/numpy/doc/example.py
Here is the rendered version of that file:
http://www.scipy.org/scipy/numpy/wiki/RenderedExample


Using Epydoc
------------

You can run epydoc on this file like so::

  $ epydoc HOWTO_DOCUMENT.txt

The output will be in a directory named html in the same directory as this
document and may be viewed by loading the index.html file into your browser.

The developmental version of epydoc, version 3.0 beta or later, is
suggested as it is faster and produces better looking output. Epydoc can be
downloaded from http://epydoc.sourceforge.net/

The appearance of some elements can be changed in the epydoc.css
style sheet. The list headings, i.e. *Parameters*:, are emphasized text, so
their appearance is controlled by the definition of the <em>
tag. For instance, to make them bold, insert::

  em     {font-weight: bold;}

The variables' types are in a span of class rst-classifier, hence can be
changed by inserting something like::

  span.rst-classifier     {font-weight: normal;}

The first line of the signature should **not** copy the signature unless
the function is written in C, in which case it is mandatory.  If the function
signature is generic (uses ``*args`` or ``**kwds``), then a function signature
may be included.

Use optional in the "type" field for parameters that are non-keyword
optional for C-functions.

