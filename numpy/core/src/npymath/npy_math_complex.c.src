/*
 * Implement some C99-compatible complex math functions
 *
 * Most of the code is taken from the msun library in FreeBSD (HEAD @ 30th June
 * 2009), under the following license:
 *
 * Copyright (c) 2007 David Schultz <das@FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#include <Python.h>
#include <math.h>

#include "config.h"
#include "numpy/npy_math.h"

#include "npy_math_private.h"

#ifndef HAVE_CREAL
double npy_creal(npy_complex_double z)
{
	_double_complex z1;
	z1.z = z;
        return REALPART(z1);
}
#endif

#ifndef HAVE_CIMAG
double npy_cimag(npy_complex_double z)
{
	_double_complex z1;
	z1.z = z;
        return IMAGPART(z1);
}
#endif

#ifndef HAVE_CABS
double npy_cabs(npy_complex_double z)
{
	return nypy_hypot(npy_creal(z), npy_cimag(z));
}
#endif

/*
 * Decorate all the functions: those are the public ones
 */

/**begin repeat
 * #kind = creal,cimag,cabs#
 * #KIND = CREAL,CIMAG,CABS#
 */
#ifdef HAVE_@KIND@
double npy_@kind@(npy_complex_double z)
{
        __npy_complex_to_c99_cast z1 = {z};
        return @kind@(z1.c99_z);
}
#endif
/**end repeat**/
