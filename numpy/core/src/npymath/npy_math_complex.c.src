/*
 * Implement some C99-compatible complex math functions
 *
 * Most of the code is taken from the msun library in FreeBSD (HEAD @ 30th June
 * 2009), under the following license:
 *
 * Copyright (c) 2007 David Schultz <das@FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#include <Python.h>
#include <math.h>

#include "config.h"
#include "numpy/npy_math.h"

#include "npy_math_private.h"

#ifndef HAVE_CREAL
double npy_creal(npy_cdouble z)
{
        union {
                npy_cdouble z;
                double a[2];
        } z1;
	z1.z = z;
        return z1.a[0];
}
#endif

#ifndef HAVE_CIMAG
double npy_cimag(npy_cdouble z)
{
        union {
                npy_cdouble z;
                double a[2];
        } z1;
	z1.z = z;
        return z1.a[1];
}
#endif

#ifndef HAVE_CABS
double npy_cabs(npy_cdouble z)
{
	return npy_hypot(npy_creal(z), npy_cimag(z));
}
#endif

#ifndef HAVE_CARG
double npy_carg(npy_cdouble z)
{
	return npy_atan2(npy_cimag(z), npy_creal(z));
}
#endif

#ifndef HAVE_CEXP
npy_cdouble npy_cexp(npy_cdouble z)
{
	npy_cdouble ret;
	double x, y;

	x = exp(npy_creal(z));
	y = npy_cimag(z);

	return npy_cpack(x * npy_cos(y), x * npy_sin(y));
	
}
#endif

#ifndef HAVE_CLOG
npy_cdouble npy_clog(npy_cdouble z)
{
	return npy_cpack(npy_log (npy_cabs (z)), npy_carg (z));
}
#endif

#ifndef HAVE_CSQRT

/* We risk spurious overflow for components >= DBL_MAX / (1 + sqrt(2)). */
#define	THRESH	(DBL_MAX / (1 + NPY_SQRT2))

npy_cdouble npy_csqrt(npy_cdouble z)
{
	npy_cdouble result;
	double a, b;
	double t;
	int scale;

	a = npy_creal(z);
	b = npy_cimag(z);

	/* Handle special cases. */
	if (a == 0 && b == 0)
		return (npy_cpack(0, b));
	if (npy_isinf(b))
		return (npy_cpack(NPY_INFINITY, b));
	if (npy_isnan(a)) {
		t = (b - b) / (b - b);	/* raise invalid if b is not a NaN */
		return (npy_cpack(a, t));	/* return NaN + NaN i */
	}
	if (npy_isinf(a)) {
		/*
		 * csqrt(inf + NaN i)  = inf +  NaN i
		 * csqrt(inf + y i)    = inf +  0 i
		 * csqrt(-inf + NaN i) = NaN +- inf i
		 * csqrt(-inf + y i)   = 0   +  inf i
		 */
		if (npy_signbit(a))
			return (npy_cpack(npy_fabs(b - b), npy_copysign(a, b)));
		else
			return (npy_cpack(a, npy_copysign(b - b, b)));
	}
	/*
	 * The remaining special case (b is NaN) is handled just fine by
	 * the normal code path below.
	 */

	/* Scale to avoid overflow. */
	if (npy_fabs(a) >= THRESH || npy_fabs(b) >= THRESH) {
		a *= 0.25;
		b *= 0.25;
		scale = 1;
	} else {
		scale = 0;
	}

	/* Algorithm 312, CACM vol 10, Oct 1967. */
	if (a >= 0) {
		t = npy_sqrt((a + npy_hypot(a, b)) * 0.5);
		result = npy_cpack(t, b / (2 * t));
	} else {
		t = npy_sqrt((-a + npy_hypot(a, b)) * 0.5);
		result = npy_cpack(npy_fabs(b) / (2 * t), npy_copysign(t, b));
	}

	/* Rescale. */
	if (scale)
		return (npy_cpack(npy_creal(result) * 2, npy_cimag(result)));
	else
		return (result);
}
#endif

#ifndef HAVE_CPOW
npy_cdouble npy_cpow (npy_cdouble x, npy_cdouble y)
{
	npy_cdouble b, p;
	double bx, by, px, py;

	b = clogf(x);
	bx = npy_creal(b);
	by = npy_cimag(b);
	px = npy_creal(p);
	py = npy_cimag(p);

	return npy_cexp(npy_cpack(bx * px - by * py, bx * py + by * px));
}
#endif

#ifndef HAVE_CCOS
npy_cdouble npy_ccos(npy_cdouble z)
{
	double x, y;
	x = npy_creal(z);
	y = npy_cimag(z);
	return npy_cpack(npy_cos(x) * npy_cosh(y), -(npy_sin(x) * npy_sinh(y)));
}
#endif

#ifndef HAVE_CSIN
npy_cdouble npy_csin(npy_cdouble z)
{
	double x, y;
	x = npy_creal(z);
	y = npy_cimag(z);
	return npy_cpack(npy_sin(x) * npy_cosh(y), npy_cos(x) * npy_sinh(y));
}
#endif

/*
 * Decorate all the functions: those are the public ones
 */

/**begin repeat
 * #kind = creal,cimag,cabs,carg#
 * #KIND = CREAL,CIMAG,CABS,carg#
 */
#ifdef HAVE_@KIND@
double npy_@kind@(npy_cdouble z)
{
        __npy_complex_to_c99_cast z1 = {z};
        return @kind@(z1.c99_z);
}
#endif
/**end repeat**/

/**begin repeat
 * #kind = cexp,clog,csqrt,ccos,csin#
 * #KIND = CEXP,CLOG,CSQRT,CCOS,CSIN#
 */
#ifdef HAVE_@KIND@
npy_cdouble npy_@kind@(npy_cdouble z)
{
        __npy_complex_to_c99_cast z1 = {z};
        __npy_complex_to_c99_cast ret;
        ret.c99_z = @kind@(z1.c99_z);
	return ret.npy_z;
}
#endif
/**end repeat**/

/**begin repeat
 * #kind = cpow#
 * #KIND = CPOW#
 */
#ifdef HAVE_@KIND@
npy_cdouble npy_@kind@(npy_cdouble x, npy_cdouble y)
{
        __npy_complex_to_c99_cast x1 = {x};
        __npy_complex_to_c99_cast y1 = {y};
        __npy_complex_to_c99_cast ret;
        ret.c99_z = @kind@(x1.c99_z, y1.c99_z);
	return ret.npy_z;
}
#endif
/**end repeat**/
