/*
 * vim:syntax=c
 * A small module to implement missing C99 math capabilities required by numpy
 *
 * Please keep this independant of python !
 */

/*
 *****************************************************************************
 **                     C99 PROTOTYPES                                      **
 *****************************************************************************
 */

#if 0

/**begin repeat
 * #type = float, double, longdouble#
 * #c = f, ,l#
*/

/**begin repeat1
 * #kind = sin,cos,tan,sinh,cosh,tanh,fabs,floor,ceil,rint,trunc,sqrt,log10,
 *         log,exp,expm1,asin,acos,atan,asinh,acosh,atanh,log1p,exp2,log2,
 *         logb#
 */

@type@ @kind@@c@(@type@ x);

/**end repeat1**/

/**begin repeat1
 * #kind = atan2,hypot,pow,fmod,scalb#
 */

@type@ @kind@@c@(@type@ x, @type@ y);

/**end repeat1**/

@type@ modf@c@(@type@ x, @type@ *iptr);
@type@ ldexp@c@(@type@ x, int iexp);
@type@ frexp@c@(@type@ x, int *iptr);
@type@ scalbn@c@(@type@ x, int pow);
@type@ scalbln@c@(@type@ x, long pow);

/**end repeat**/

#endif

/*
 *****************************************************************************
 **                     BASIC MATH FUNCTIONS                                **
 *****************************************************************************
 */

/* Original code by Konrad Hinsen.  */
#ifndef HAVE_EXPM1
static double expm1(double x)
{
    double u = exp(x);
    if (u == 1.0) {
        return x;
    } else if (u-1.0 == -1.0) {
        return -1;
    } else {
        return (u-1.0) * x/log(u);
    }
}
#endif

#ifndef HAVE_LOG1P
static double log1p(double x)
{
    double u = 1. + x;
    if (u == 1.0) {
        return x;
    } else {
        return log(u) * x / (u - 1);
    }
}
#endif

#ifndef HAVE_HYPOT
static double hypot(double x, double y)
{
    double yx;

    x = fabs(x);
    y = fabs(y);
    if (x < y) {
        double temp = x;
        x = y;
        y = temp;
    }
    if (x == 0.)
        return 0.;
    else {
        yx = y/x;
        return x*sqrt(1.+yx*yx);
    }
}
#endif

#ifndef HAVE_ACOSH
static double acosh(double x)
{
    return 2*log(sqrt((x+1.0)/2)+sqrt((x-1.0)/2));
}
#endif

#ifndef HAVE_ASINH
static double asinh(double xx)
{
    double x, d;
    int sign;
    if (xx < 0.0) {
        sign = -1;
        x = -xx;
    }
    else {
        sign = 1;
        x = xx;
    }
    if (x > 1e8) {
        d = x;
    } else {
        d = sqrt(x*x + 1);
    }
    return sign*log1p(x*(1.0 + x/(d+1)));
}
#endif

#ifndef HAVE_ATANH
static double atanh(double x)
{
    return 0.5*log1p(2.0*x/(1.0-x));
}
#endif

#ifndef HAVE_RINT
static double rint(double x)
{
    double y, r;

    y = floor(x);
    r = x - y;

    if (r > 0.5) goto rndup;

    /* Round to nearest even */
    if (r==0.5) {
        r = y - 2.0*floor(0.5*y);
        if (r==1.0) {
        rndup:
            y+=1.0;
        }
    }
    return y;
}
#endif

#ifndef HAVE_TRUNC
static double trunc(double x)
{
    return x < 0 ? ceil(x) : floor(x);
}
#endif

#ifndef HAVE_EXP2
#define LOG2 0.69314718055994530943
static double exp2(double x)
{
    return exp(LOG2*x);
}
#undef LOG2
#endif

#ifndef HAVE_LOG2
#define INVLOG2 1.4426950408889634074
static double log2(double x)
{
    return INVLOG2*log(x);
}
#undef INVLOG2
#endif

/*
 *****************************************************************************
 **                     IEEE 754 FPU HANDLING                               **
 *****************************************************************************
 */
#if !defined(HAVE_DECL_ISNAN)
    # define isnan(x) ((x) != (x))
#endif

/* VS 2003 with /Ox optimizes (x)-(x) to 0, which is not IEEE compliant. So we
 * force (x) + (-x), which seems to work. */
#if !defined(HAVE_DECL_ISFINITE)
    # define isfinite(x) !isnan((x) + (-x))
#endif

#if !defined(HAVE_DECL_ISINF)
#define isinf(x) (!isfinite(x) && !isnan(x))
#endif

#if !defined(HAVE_DECL_SIGNBIT)
    #include "_signbit.c"
    # define signbit(x) \
              (sizeof (x) == sizeof (long double) ? signbit_ld (x) \
               : sizeof (x) == sizeof (double) ? signbit_d (x) \
               : signbit_f (x))

static int signbit_f (float x)
{
    return signbit_d((double)x);
}

static int signbit_ld (long double x)
{
    return signbit_d((double)x);
}
#endif

/*
 * if C99 extensions not available then define dummy functions that use the
 * double versions for
 *
 * sin, cos, tan
 * sinh, cosh, tanh,
 * fabs, floor, ceil, rint, trunc
 * sqrt, log10, log, exp, expm1
 * asin, acos, atan,
 * asinh, acosh, atanh
 *
 * hypot, atan2, pow, fmod, modf
 *
 * We assume the above are always available in their double versions.
 *
 * NOTE: some facilities may be available as macro only  instead of functions.
 * For simplicity, we define our own functions and undef the macros. We could
 * instead test for the macro, but I am lazy to do that for now.
 */

/**begin repeat
 * #type = longdouble, float#
 * #TYPE = LONGDOUBLE, FLOAT#
 * #c = l,f#
 * #C = L,F#
*/

/**begin repeat1
 * #kind = sin,cos,tan,sinh,cosh,tanh,fabs,floor,ceil,rint,trunc,sqrt,log10,
 *         log,exp,expm1,asin,acos,atan,asinh,acosh,atanh,log1p,exp2,log2#
 * #KIND = SIN,COS,TAN,SINH,COSH,TANH,FABS,FLOOR,CEIL,RINT,TRUNC,SQRT,LOG10,
 *         LOG,EXP,EXPM1,ASIN,ACOS,ATAN,ASINH,ACOSH,ATANH,LOG1P,EXP2,LOG2#
 */
#ifndef HAVE_@KIND@@C@
#ifdef @kind@@c@
#undef @kind@@c@
#endif
static @type@ @kind@@c@(@type@ x)
{
    return (@type@) @kind@((double)x);
}
#endif
/**end repeat1**/

/**begin repeat1
 * #kind = atan2,hypot,pow,fmod#
 * #KIND = ATAN2,HYPOT,POW,FMOD#
 */
#ifndef HAVE_@KIND@@C@
#ifdef @kind@@c@
#undef @kind@@c@
#endif
static @type@ @kind@@c@(@type@ x, @type@ y)
{
    return (@type@) @kind@((double)x, (double) y);
}
#endif
/**end repeat1**/

#ifndef HAVE_MODF@C@
#ifdef modf@c@
#undef modf@c@
#endif
static @type@ modf@c@(@type@ x, @type@ *iptr)
{
    double niptr;
    double y = modf((double)x, &niptr);
    *iptr = (@type@) niptr;
    return (@type@) y;
}
#endif

/**end repeat**/
